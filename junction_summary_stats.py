import pandas as pd

chromosome = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5']
input_name = []
for name in chromosome:
    input_name.append(name + '_42_15_28')

enzymelist = []
total_pept = []
junctions = []
summary_enzymelist = []
summary_junctions = []
summary_peptides = []

for (name, xsome) in zip(input_name, chromosome):
    # print(name, xsome)
    junctions_file_fwd = pd.read_csv(name + '_+_junction_spanning.csv')
    junctions_file_fwd = junctions_file_fwd.drop('Unnamed: 0', axis=1)
    junctions_file_rev = pd.read_csv(name + '_-_junction_spanning.csv')
    junctions_file_rev = junctions_file_rev.drop('Unnamed: 0', axis=1)

    # Number of junction covering peptides generated by each enzyme
    junction_statistics = pd.DataFrame()

    for enzyme in sorted(set(junctions_file_fwd['enzyme'])):
        enzymecheck = junctions_file_fwd.apply(lambda x: True if x['enzyme'] == enzyme else False, axis=1)
        enzyme_total = len(enzymecheck[enzymecheck == True])
        enzymelist.append(enzyme)
        total_pept.append(enzyme_total)
    for enzyme in sorted(set(junctions_file_rev['enzyme'])):
        enzymecheck = junctions_file_rev.apply(lambda x: True if x['enzyme'] == enzyme else False, axis=1)
        enzyme_total = len(enzymecheck[enzymecheck == True])
        enzymelist.append(enzyme)
        total_pept.append(enzyme_total)

    junction_statistics['enzyme'] = enzymelist
    junction_statistics['junction_spanning_peptides'] = total_pept

    ##################################################
    # Unique Junctions covered by each separate enzyme
    indexed_file_fwd = junctions_file_fwd.set_index('enzyme')
    indexed_file_rev = junctions_file_rev.set_index('enzyme')

    for enzyme in sorted(set(enzymelist)):
        intronslist = []
        by_enzyme_fwd = indexed_file_fwd.loc[[enzyme]]
        intronslist.append(by_enzyme_fwd['intron_id'].tolist())
        for introns in intronslist:
            junctions.append(len(set(introns)))
    for enzyme in sorted(set(enzymelist)):
        intronslist = []
        by_enzyme_rev = indexed_file_rev.loc[[enzyme]]
        intronslist.append(by_enzyme_rev['intron_id'].tolist())
        for introns in intronslist:
            junctions.append(len(set(introns)))

    junction_statistics['unique_junctions_covered'] = junctions
    junction_statistics = junction_statistics.set_index('enzyme')

# SIMPLIFIED DATAFRAME
for enzyme in sorted(set(junction_statistics.index)):
    by_enzyme = junction_statistics.loc[[enzyme]]  # needs to be indexed by enzyme
    summary_enzymelist.append(enzyme)
    summary_junctions.append(sum(by_enzyme['unique_junctions_covered']))
    summary_peptides.append(sum(by_enzyme['junction_spanning_peptides']))

overall_df = pd.DataFrame()
overall_df['enzyme'] = summary_enzymelist
overall_df['junction_spanning_peptides'] = summary_peptides
overall_df['unique_junctions_covered'] = summary_junctions

intron_no = 0
for xsome in chromosome:
    # Real number of exon-exon junctions in the proteins being examined
    posstrand_cdsdf = pd.read_csv(xsome + '_+_cdsdf.csv')
    posstrand_cdsdf = posstrand_cdsdf[posstrand_cdsdf.intron_id != 'na']
    negstrand_cdsdf = pd.read_csv(xsome + '_-_cdsdf.csv')
    negstrand_cdsdf = negstrand_cdsdf[negstrand_cdsdf.intron_id != 'na']
    intron_no += len((posstrand_cdsdf['intron_id']))  # is set necessary or not?
    intron_no += len((negstrand_cdsdf['intron_id']))  # is set necessary or not?

    # Adding column for % of junctions covered, out of the available
    # junctions in the proteins
    overall_df['total_junction_coverage'] = overall_df['junction_spanning_peptides'] / (intron_no) * 100
    overall_df.to_csv('junction_statistics.csv')