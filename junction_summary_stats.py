import pandas as pd

def junction_summary_stats(junction_spanning_files, cds_files, output_csv_name):
    global overall_df

    enzymelist = []
    total_pept = []
    junctions = []
    summary_enzymelist = []
    summary_junctions = []
    summary_peptides = []

    for input_file in junction_spanning_files:
        junctions_file = pd.read_csv(input_file)
        junctions_file = junctions_file.drop('Unnamed: 0', axis=1)

        # Number of junction covering peptides generated by each enzyme
        junction_statistics = pd.DataFrame()

        for enzyme in sorted(set(junctions_file['enzyme'])):
            enzymecheck = junctions_file.apply(lambda x: True if x['enzyme'] == enzyme else False, axis=1)
            enzyme_total = len(enzymecheck[enzymecheck == True])
            enzymelist.append(enzyme)
            total_pept.append(enzyme_total)

        junction_statistics['enzyme'] = enzymelist
        junction_statistics['junction_spanning_peptides'] = total_pept

        ##################################################
        # Unique Junctions covered by each separate enzyme
        indexed_file = junctions_file.set_index('enzyme')

        for enzyme in sorted(set(enzymelist)):
            intronslist = []
            by_enzyme = indexed_file.loc[[enzyme]]
            intronslist.append(by_enzyme['intron_id'].tolist())
            for introns in intronslist:
                junctions.append(len(set(introns)))

        junction_statistics['unique_junctions_covered'] = junctions
        junction_statistics = junction_statistics.set_index('enzyme')

    # SIMPLIFIED DATAFRAME
    for enzyme in sorted(set(junction_statistics.index)):
        by_enzyme = junction_statistics.loc[[enzyme]]  # needs to be indexed by enzyme
        summary_enzymelist.append(enzyme)
        summary_junctions.append(sum(by_enzyme['unique_junctions_covered']))
        summary_peptides.append(sum(by_enzyme['junction_spanning_peptides']))

    overall_df = pd.DataFrame()
    overall_df['enzyme'] = summary_enzymelist
    overall_df['junction_spanning_peptides'] = summary_peptides
    overall_df['unique_junctions_covered'] = summary_junctions

    ##############
    intron_no = 0
    for input_name in cds_files:
        # Real number of exon-exon junctions in the proteins being examined
        cdsdf = pd.read_csv(input_name)
        cdsdf = cdsdf[cdsdf.intron_id != 'na']
        intron_no += len((cdsdf['intron_id']))  # is set necessary or not?

        # Adding column for % of junctions covered, out of the available
        # junctions in the proteins
        overall_df['total_junction_coverage'] = overall_df['junction_spanning_peptides'] / (intron_no) * 100
        overall_df.to_csv(output_csv_name)

## EXAMPLE
# add all of the filtered junction csv files to this list
junction_spanning_files = ['chr1_+_junction_spanning.csv', 'chr1_-_junction_spanning.csv',
                           'chr2_+_junction_spanning.csv', 'chr2_-_junction_spanning.csv',
                           'chr3_+_junction_spanning.csv', 'chr3_-_junction_spanning.csv',
                           'chr4_+_junction_spanning.csv', 'chr4_-_junction_spanning.csv',
                           'chr5_+_junction_spanning.csv', 'chr5_-_junction_spanning.csv']
cds_files = ['chr1_+_cdsdf.csv', 'chr1_-_cdsdf.csv',
             'chr2_+_cdsdf.csv', 'chr2_-_cdsdf.csv',
             'chr3_+_cdsdf.csv', 'chr3_-_cdsdf.csv',
             'chr4_+_cdsdf.csv', 'chr4_-_cdsdf.csv',
             'chr5_+_cdsdf.csv', 'chr5_-_cdsdf.csv']

junction_summary_stats(junction_spanning_files, cds_files, 'junction_statistics.csv')